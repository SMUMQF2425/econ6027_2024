# Generate the head of the dataset
head(quakes_sf)
# b) Prepare two interactive maps of magnitude and depth using tmap
tmap_mode("view")
tm_shape(quakes_sf) +
tm_dots(col = "mag", palette = "-Spectral", title = "Magnitude") +
tm_basemap("OpenStreetMap")
tm_shape(quakes_sf) +
tm_dots(col = "depth", palette = "Blues", title = "Depth") +
tm_basemap("OpenStreetMap")
# c) Compute the mean centre and standard deviational ellipse with magnitude as weights
# Function to compute standard deviational ellipse
compute_sde <- function(coords, weights = NULL) {
# Mean centre
mean_centre <- colMeans(coords)
# If weights are provided, calculate weighted mean centre
if (!is.null(weights)) {
mean_centre <- colSums(coords * weights) / sum(weights)
}
# Centre the coordinates
centred_coords <- sweep(coords, 2, mean_centre, "-")
# Compute covariance matrix (weighted if weights are provided)
if (!is.null(weights)) {
cov_matrix <- cov.wt(centred_coords, wt = weights)$cov
} else {
cov_matrix <- cov(centred_coords)
}
# Eigenvalue decomposition of covariance matrix
eig <- eigen(cov_matrix)
# Get lengths of ellipse axes (sqrt of eigenvalues)
axis_lengths <- sqrt(eig$values)
# Get rotation angle of ellipse (from eigenvectors)
angle <- atan2(eig$vectors[2, 1], eig$vectors[1, 1])
list(mean_center = mean_centre, axis_lengths = axis_lengths, angle = angle)
}
# Compute standard deviational ellipse for quakes using magnitude as weights
coords <- st_coordinates(quakes_sf)
weights <- quakes$mag
ellipse_quakes <- compute_sde(coords, weights)
# Print the mean centre, axis lengths, and angle of the ellipse
print(ellipse_quakes)
# Optionally, create a visualisation of the ellipse
# Define a function to generate ellipse points for visualisation
generate_ellipse_points <- function(mean_centre, axis_lengths, angle, n_points = 100) {
theta <- seq(0, 2 * pi, length.out = n_points)
# Parametric equation for an ellipse
ellipse_coords <- cbind(
axis_lengths[1] * cos(theta),
axis_lengths[2] * sin(theta)
)
# Rotate the ellipse by the specified angle
rotation_matrix <- matrix(c(cos(angle), -sin(angle), sin(angle), cos(angle)), ncol = 2)
rotated_coords <- ellipse_coords %*% rotation_matrix
# Translate the ellipse to the mean centre
ellipse_coords <- sweep(rotated_coords, 2, mean_centre, "+")
# Ensure the ellipse is closed by adding the first point as the last point
ellipse_coords <- rbind(ellipse_coords, ellipse_coords[1, ])
return(ellipse_coords)
}
# Generate the ellipse points
ellipse_points <- generate_ellipse_points(ellipse_quakes$mean_center, ellipse_quakes$axis_lengths, ellipse_quakes$angle)
# Convert the ellipse points to an sf polygon
ellipse_polygon <- st_polygon(list(ellipse_points))
# Convert the polygon to an sf object
ellipse_sf <- st_sfc(ellipse_polygon, crs = st_crs(quakes_sf))
# d) Plot the output on a static map
tm_shape(quakes_sf) +
tm_dots(col = "mag", title = "Earthquake Magnitude") +
tm_shape(ellipse_sf) +
tm_borders(col = "red", lwd = 2) +
tm_layout(title = "Standard Deviational Ellipse for Quakes")
# Question 3
# 1. Load the "sg_house.csv" dataset and the Singapore shapefile, and combine them
sg_house <- read.csv("sg_house.csv")
# Load the required libraries
library(sp)
library(spData)
library(sf)
library(tmap)
library(leaflet)
library(spatstat)
library(car)
# Question 1
# a) Load the "cycle_hire" dataset
data("cycle_hire", package = "spData")
cycle_hire
# b) Compute a standard deviational ellipse
# Convert the 'cycle_hire' sf object to a ppp object
cycle_hire_coords <- st_coordinates(cycle_hire)
# Compute the standard deviational ellipse
ellipse_cycle_hire <- dataEllipse(cycle_hire_coords[,1], cycle_hire_coords[,2],
levels = 0.95, draw = FALSE)
# Save the ellipse points to a .txt file
write.table(ellipse_cycle_hire, file = "ellipse_cycle_hire.txt", row.names = FALSE)
# To visualize it on a plot (not interactive map)
plot(cycle_hire_coords, main = "Cycle Hire Points and Standard Deviational Ellipse")
lines(ellipse_cycle_hire, col = "red", lwd = 2)
# Convert ellipse points to sf polygon
ellipse_polygon <- st_polygon(list(as.matrix(ellipse_cycle_hire)))
# Convert the polygon to an sf object
ellipse_sf <- st_sfc(ellipse_polygon, crs = st_crs(cycle_hire))
# Plot the points and the ellipse on a leaflet map
leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
addCircleMarkers(data = cycle_hire, lng = ~st_coordinates(cycle_hire)[,1], lat = ~st_coordinates(cycle_hire)[,2], color = "blue") %>%
addPolygons(data = ellipse_sf, color = "red", weight = 2)
# c) Plot hire points and the ellipse on an interactive map using leaflet
# Create a new sf object by combining the coordinates with the original data
cycle_hire_sf <- cbind(cycle_hire, cycle_hire_coords)
# Convert ellipse points (from car::dataEllipse) to sf polygon
ellipse_polygon <- st_polygon(list(as.matrix(ellipse_cycle_hire)))
# Convert the polygon to an sf object
ellipse_sf <- st_sfc(ellipse_polygon, crs = st_crs(cycle_hire))
# Plot the points and the ellipse on a leaflet map
leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
addCircleMarkers(data = cycle_hire_sf, lng = ~X, lat = ~Y, color = "blue", radius = 3) %>%
addPolygons(data = ellipse_sf, color = "red", weight = 2)
# Question 2
# a) Load the "quakes" dataset and assign spatial coordinates
data("quakes")
quakes_sf <- st_as_sf(quakes, coords = c("long", "lat"), crs = 4326)
# Generate the head of the dataset
head(quakes_sf)
# b) Prepare two interactive maps of magnitude and depth using tmap
tmap_mode("view")
tm_shape(quakes_sf) +
tm_dots(col = "mag", palette = "-Spectral", title = "Magnitude") +
tm_basemap("OpenStreetMap")
tm_shape(quakes_sf) +
tm_dots(col = "depth", palette = "Blues", title = "Depth") +
tm_basemap("OpenStreetMap")
# c) Compute the mean centre and standard deviational ellipse with magnitude as weights
# Function to compute standard deviational ellipse
compute_sde <- function(coords, weights = NULL) {
# Mean centre
mean_centre <- colMeans(coords)
# If weights are provided, calculate weighted mean centre
if (!is.null(weights)) {
mean_centre <- colSums(coords * weights) / sum(weights)
}
# Centre the coordinates
centred_coords <- sweep(coords, 2, mean_centre, "-")
# Compute covariance matrix (weighted if weights are provided)
if (!is.null(weights)) {
cov_matrix <- cov.wt(centred_coords, wt = weights)$cov
} else {
cov_matrix <- cov(centred_coords)
}
# Eigenvalue decomposition of covariance matrix
eig <- eigen(cov_matrix)
# Get lengths of ellipse axes (sqrt of eigenvalues)
axis_lengths <- sqrt(eig$values)
# Get rotation angle of ellipse (from eigenvectors)
angle <- atan2(eig$vectors[2, 1], eig$vectors[1, 1])
list(mean_center = mean_centre, axis_lengths = axis_lengths, angle = angle)
}
# Compute standard deviational ellipse for quakes using magnitude as weights
coords <- st_coordinates(quakes_sf)
weights <- quakes$mag
ellipse_quakes <- compute_sde(coords, weights)
# Print the mean centre, axis lengths, and angle of the ellipse
print(ellipse_quakes)
# Optionally, create a visualisation of the ellipse
# Define a function to generate ellipse points for visualisation
generate_ellipse_points <- function(mean_centre, axis_lengths, angle, n_points = 100) {
theta <- seq(0, 2 * pi, length.out = n_points)
# Parametric equation for an ellipse
ellipse_coords <- cbind(
axis_lengths[1] * cos(theta),
axis_lengths[2] * sin(theta)
)
# Rotate the ellipse by the specified angle
rotation_matrix <- matrix(c(cos(angle), -sin(angle), sin(angle), cos(angle)), ncol = 2)
rotated_coords <- ellipse_coords %*% rotation_matrix
# Translate the ellipse to the mean centre
ellipse_coords <- sweep(rotated_coords, 2, mean_centre, "+")
# Ensure the ellipse is closed by adding the first point as the last point
ellipse_coords <- rbind(ellipse_coords, ellipse_coords[1, ])
return(ellipse_coords)
}
# Generate the ellipse points
ellipse_points <- generate_ellipse_points(ellipse_quakes$mean_center, ellipse_quakes$axis_lengths, ellipse_quakes$angle)
# Convert the ellipse points to an sf polygon
ellipse_polygon <- st_polygon(list(ellipse_points))
# Convert the polygon to an sf object
ellipse_sf <- st_sfc(ellipse_polygon, crs = st_crs(quakes_sf))
ellipse_sf
# d) Plot the output on a static map
tm_shape(quakes_sf) +
tm_dots(col = "mag", title = "Earthquake Magnitude") +
tm_shape(ellipse_sf) +
tm_borders(col = "red", lwd = 2) +
tm_layout(title = "Standard Deviational Ellipse for Quakes")
# Question 3
# 1. Load the "sg_house.csv" dataset and the Singapore shapefile, and combine them
sg_house <- read.csv("sg_house.csv")
# Load libraries
library(sf)            # For handling GeoJSON and spatial data
library(spatstat)      # For spatial point pattern analysis
library(tmap)          # For map visualisation
library(ggmap)         # Geocoding service using Google Maps
library(ggplot2)       # For general plotting
library(dplyr)         # For data wrangling
library(spdep)         # For spatial dependencies and neighbourhood analysis
# 1. Data Preparation
# Load the resale flat prices dataset
resale_data <- read.csv("ResaleflatpricesbasedonregistrationdatefromJan2017onwards.csv")
gc()
# Load libraries
library(sf)            # For handling GeoJSON and spatial data
library(spatstat)      # For spatial point pattern analysis
library(tmap)          # For map visualisation
library(ggplot2)       # For general plotting
library(tidyr)         # For tidying data
library(dplyr)         # For data wrangling
library(spdep)         # For spatial dependencies and neighbourhood analysis
library(tidygeocoder)  # For geocoding
# 1. Data Preparation
# Load the resale flat prices dataset
resale_data <- read.csv("ResaleflatpricesbasedonregistrationdatefromJan2017onwards.csv")
install.packages("devtools")
devtools::install_github("IRkernel/IRkernel")
IRkernel::installspec()
install.packages("xml2")
setwd("~/Downloads/EC627 Spatial Econometrics & Data Analysis/Project")
bus_stops <- xml2::read_xml("BusStops.xml")
View(bus_stops)
xml_data <- xmlToList(bus_stops)
require(XML)
xml_data <- xmlToList(bus_stops)
xml_data <- xmlToDataFrame("bus_stops.xml")
xml_data <- xmlToDataFrame("BusStops.xml")
install.packages("xml")
install.packages("XML")
xml_data <- xmlToDataFrame("BusStops.xml")
library(XML)
xml_data <- xmlToDataFrame("BusStops.xml")
remove.packages("xml2")
remove.packages("XML")
library(sf)
bus_stops = st_read("stops.geojson")
sapply(bus_stops, class)
remove.packages("rjson")
taxi_stands = st_read("LTATaxiStopGEOJSON.geojson")
sapply(taxi_stands, class)
lrt = st_read("MasterPlan2003LRTLine.geojson")
mrt = st_read("LTAMRTStationExitGEOJSON.geojson")
sapply(lrt, class)
sapply(mrt, class)
library(tmap)
(lrt = st_read("MasterPlan2003LRTLine.geojson"))
st_cast(lrt, "POINT")
View(mrt)
View(lrt)
lrt = st_cast(lrt, "POINT")
(lrt = st_read("MasterPlan2003LRTLine.geojson"))
View(lrt)
View(mrt)
(lrt = st_read("MasterPlan2003LRTLine.geojson"))
lrt <- st_cast(lrt, "POINT")
(lrt = st_read("MasterPlan2003LRTLine.geojson"))
lrt <- unique(st_cast(lrt, "POINT"))
lrt <- unique(st_cast(lrt, "POINT"))
View(lrt)
setwd("~/Downloads/EC627 Spatial Econometrics & Data Analysis/Assignment 1")
library(rmarkdown)
render("assignment1.Rmd", output_format = "pdf_document")
render("assignment1.Rmd", output_format = "pdf_document")
render("assignment1.Rmd")
render("assignment1.Rmd")
render("assignment1.Rmd")
data("cycle_hire", package = "spData")
cycle_hire
cycle_hire.proj = st_transform(cycle_hire, crs=27700)
cycle_hire_coords = st_coordinates(cycle_hire.proj)
class(cycle_hire_coords)
sde = calc_sde(id = 1, calccentre = T, weighted = F, points = cycle_hire_coords)
(cycle_sde_line = sde$LOCATIONS
%>% st_as_sf(coords = c("x", "y"), crs=st_crs(cycle_hire))
%>% st_combine() %>% st_cast("LINESTRING"))
(cycle_std_ellps = st_sf(sde$ATTRIBUTES, geom=st_geometry(cycle_sde_line)))
class(cycle_std_ellps)
write.table(cycle_std_ellps, file = "cycle_std_ellps.txt")
cycle_std_ellps_sf = st_as_sf(cycle_std_ellps)
cycle_std_ellps_sf <- st_make_valid(cycle_std_ellps_sf)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = cycle_hire,
radius = 3,
color = "blue",
label = ~name,
popup = ~name) %>%
addPolylines(data = cycle_std_ellps_sf,
color = "red",
weight = 2,
opacity = 0.8,
popup = ~paste("SDE attributes:", sde)) %>%
addLayersControl(overlayGroups = c("Cycle hire points", "Standard deviational ellipse"),
options = layersControlOptions(collapsed = FALSE))
data("cycle_hire", package = "spData")
cycle_hire
class(cycle_hire)
cycle_hire.proj = st_transform(cycle_hire, crs=27700)
st_crs(cycle_hire.proj)$proj4string
st_crs(cycle_hire.proj)$epsg
cycle_hire_coords = st_coordinates(cycle_hire.proj)
class(cycle_hire_coords)
sde = calc_sde(id = 1, calccentre = T, weighted = F, points = cycle_hire_coords)
(cycle_sde_line = sde$LOCATIONS
%>% st_as_sf(coords = c("x", "y"), crs=st_crs(cycle_hire))
%>% st_combine() %>% st_cast("LINESTRING"))
(cycle_std_ellps = st_sf(sde$ATTRIBUTES, geom=st_geometry(cycle_sde_line)))
class(cycle_std_ellps)
write.table(cycle_std_ellps, file = "cycle_std_ellps.txt")
cycle_std_ellps_sf = st_as_sf(cycle_std_ellps)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = cycle_hire,
radius = 3,
color = "blue",
label = ~name,
popup = ~name) %>%
addPolylines(data = cycle_std_ellps_sf,
color = "red",
weight = 2,
opacity = 0.8,
popup = ~paste("SDE attributes:", sde)) %>%
addLayersControl(overlayGroups = c("Cycle hire points", "Standard deviational ellipse"),
options = layersControlOptions(collapsed = FALSE))
data("cycle_hire", package = "spData")
cycle_hire
class(cycle_hire)
cycle_hire.proj = st_transform(cycle_hire, crs=27700)
st_crs(cycle_hire.proj)$proj4string
st_crs(cycle_hire.proj)$epsg
data("cycle_hire", package = "spData")
cycle_hire
class(cycle_hire)
cycle_hire.geo = st_set_crs(cycle_hire, 27700)
st_is_longlat(cycle_hire.geo)
st_crs(cycle_hire.geo)$proj4string
cycle_hire.proj = st_transform(cycle_hire.geo, crs=27700)
st_crs(cycle_hire.proj)$proj4string
st_crs(cycle_hire.proj)$epsg
cycle_hire_coords = st_coordinates(cycle_hire.proj)
class(cycle_hire_coords)
sde = calc_sde(id = 1, calccentre = T, weighted = F, points = cycle_hire_coords)
(cycle_sde_line = sde$LOCATIONS
%>% st_as_sf(coords = c("x", "y"), crs=st_crs(cycle_hire.proj))
%>% st_combine() %>% st_cast("LINESTRING"))
(cycle_std_ellps = st_sf(sde$ATTRIBUTES, geom=st_geometry(cycle_sde_line)))
class(cycle_std_ellps)
write.table(cycle_std_ellps, file = "cycle_std_ellps.txt")
cycle_std_ellps_sf = st_as_sf(cycle_std_ellps)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = cycle_hire,
radius = 3,
color = "blue",
label = ~name,
popup = ~name) %>%
addPolylines(data = cycle_std_ellps_sf,
color = "red",
weight = 2,
opacity = 0.8,
popup = ~paste("SDE attributes:", sde)) %>%
addLayersControl(overlayGroups = c("Cycle hire points", "Standard deviational ellipse"),
options = layersControlOptions(collapsed = FALSE))
data("cycle_hire", package = "spData")
cycle_hire
class(cycle_hire)
st_is_longlat(cycle_hire)
st_crs(cycle_hire)$proj4string
cycle_hire.proj = st_transform(cycle_hire.geo, crs=27700)
st_crs(cycle_hire.proj)$proj4string
st_crs(cycle_hire.proj)$epsg
st_is_longlat(cycle_hire.proj)
data("cycle_hire", package = "spData")
cycle_hire
class(cycle_hire)
st_is_longlat(cycle_hire)
st_crs(cycle_hire)$proj4string
cycle_hire.proj = st_transform(cycle_hire, crs=27700)
st_crs(cycle_hire.proj)$proj4string
st_crs(cycle_hire.proj)$epsg
st_is_longlat(cycle_hire.proj)
data("cycle_hire", package = "spData")
cycle_hire
class(cycle_hire)
st_is_longlat(cycle_hire)
st_crs(cycle_hire)$proj4string
source("LonLat2UTM.R")
source("LonLat2UTM.R")
ldn.coords = c(51.509865, -0.118092)
(utm.london = lonlat2UTM(london.coords))
data("cycle_hire", package = "spData")
cycle_hire
class(cycle_hire)
st_is_longlat(cycle_hire)
st_crs(cycle_hire)$proj4string
source("LonLat2UTM.R")
london.coords = c(51.509865, -0.118092)
(utm.london = lonlat2UTM(london.coords))
st_crs(utm.london)$proj4string
cycle_hire.proj = st_transform(cycle_hire, crs=utm.london)
st_crs(cycle_hire.proj)$proj4string
st_crs(cycle_hire.proj)$epsg
cycle_hire_coords = st_coordinates(cycle_hire.proj)
class(cycle_hire_coords)
sde = calc_sde(id = 1, calccentre = T, weighted = F, points = cycle_hire_coords)
(cycle_sde_line = sde$LOCATIONS
%>% st_as_sf(coords = c("x", "y"), crs=st_crs(cycle_hire.proj))
%>% st_combine() %>% st_cast("LINESTRING"))
(cycle_std_ellps = st_sf(sde$ATTRIBUTES, geom=st_geometry(cycle_sde_line)))
class(cycle_std_ellps)
write.table(cycle_std_ellps, file = "cycle_std_ellps.txt")
st_is_longlat(cycle_hire.proj)
cycle_std_ellps_sf = st_as_sf(cycle_std_ellps)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = cycle_hire.proj,
radius = 3,
color = "blue",
label = ~name,
popup = ~name) %>%
addPolylines(data = cycle_std_ellps_sf,
color = "red",
weight = 2,
opacity = 0.8,
popup = ~paste("SDE attributes:", sde)) %>%
addLayersControl(overlayGroups = c("Cycle hire points", "Standard deviational ellipse"),
options = layersControlOptions(collapsed = FALSE))
data("cycle_hire", package = "spData")
cycle_hire
class(cycle_hire)
st_is_longlat(cycle_hire)
st_crs(cycle_hire)$proj4string
source("LonLat2UTM.R")
london.coords = c(51.509865, -0.118092)
(utm.london = lonlat2UTM(london.coords))
st_crs(utm.london)$proj4string
cycle_hire.proj = st_transform(cycle_hire, crs=utm.london)
st_crs(cycle_hire.proj)$proj4string
st_crs(cycle_hire.proj)$epsg
isTRUE(all.equal(st_crs(utm.london), st_crs(cycle_hire)))
data("cycle_hire", package = "spData")
cycle_hire
class(cycle_hire)
st_is_longlat(cycle_hire)
st_crs(cycle_hire)$proj4string
source("LonLat2UTM.R")
london.coords = c(51.509865, -0.118092)
(utm.london = lonlat2UTM(london.coords))
st_crs(utm.london)$proj4string
cycle_hire.proj = st_transform(cycle_hire, crs=utm.london)
st_crs(cycle_hire.proj)$proj4string
st_crs(cycle_hire.proj)$epsg
isTRUE(all.equal(st_crs(utm.london), st_crs(cycle_hire.proj)))
st_crs(cycle_hire)$proj
data("cycle_hire", package = "spData")
cycle_hire
class(cycle_hire)
st_is_longlat(cycle_hire)$proj
data("cycle_hire", package = "spData")
cycle_hire
class(cycle_hire)
cycle_hire$proj
st_is_longlat(cycle_hire)
data("cycle_hire", package = "spData")
cycle_hire
class(cycle_hire)
st_crs(cycle_hire)$proj
st_is_longlat(cycle_hire)
data("cycle_hire", package = "spData")
cycle_hire
class(cycle_hire)
st_crs(cycle_hire)$proj
data("cycle_hire", package = "spData")
cycle_hire
class(cycle_hire)
st_crs(cycle_hire)$proj
cycle_hire.proj <- st_transform(cycle_hire, crs = 27700)  # British National Grid for London, UK
st_crs(cycle_hire.proj)$proj
cycle_hire_coords = st_coordinates(cycle_hire.proj)
class(cycle_hire_coords)
sde = calc_sde(id = 1, calccentre = T, weighted = F, points = cycle_hire_coords)
(cycle_sde_line = sde$LOCATIONS
%>% st_as_sf(coords = c("x", "y"), crs=st_crs(cycle_hire.proj))
%>% st_combine() %>% st_cast("LINESTRING"))
(cycle_std_ellps = st_sf(sde$ATTRIBUTES, geom=st_geometry(cycle_sde_line)))
class(cycle_std_ellps)
write.table(cycle_std_ellps, file = "cycle_std_ellps.txt")
data("cycle_hire", package = "spData")
cycle_hire
class(cycle_hire)
st_crs(cycle_hire)$proj
st_crs(cycle_hire.proj)$proj4string
st_crs(cycle_hire.proj)$epsg
cycle_hire.proj <- st_transform(cycle_hire, crs = 27700)  # British National Grid for London, UK
st_crs(cycle_hire.proj)$proj
st_crs(cycle_hire.proj)$proj4string
st_crs(cycle_hire.proj)$epsg
cycle_hire_coords = st_coordinates(cycle_hire.proj)
class(cycle_hire_coords)
sde = calc_sde(id = 1, calccentre = T, weighted = F, points = cycle_hire_coords)
(cycle_sde_line = sde$LOCATIONS
%>% st_as_sf(coords = c("x", "y"), crs=st_crs(cycle_hire.proj))
%>% st_combine() %>% st_cast("LINESTRING"))
(cycle_std_ellps = st_sf(sde$ATTRIBUTES, geom=st_geometry(cycle_sde_line)))
class(cycle_std_ellps)
write.table(cycle_std_ellps, file = "cycle_std_ellps.txt")
