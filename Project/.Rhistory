install.packages(c("spData", "sf", "tmap", "leaflet"))
library(spData)
library(sf)
library(tmap)
library(leaflet)
data("cycle_hire", package = "spData")
force(cycle_hire)
install.packages("spatstat")
library(spatstat)
cycle_hire_ppp <- as.ppp(cycle_hire)
ellipse_cycle_hire <- with(cycle_hire, spatstat.geom::stdev.ellipse(x, y))
library(sp)
coordinates(cycle_hire) <- ~x+y
cycle_hire_coords <- st_coordinates(cycle_hire)
library(sp)
library(spData)
library(sf)
library(tmap)
library(leaflet)
library(spatstat)
data("cycle_hire", package = "spData")
cycle_hire_coords <- st_coordinates(cycle_hire)
cycle_hire_window <- owin(xrange = range(cycle_hire_coords[, 1]),
yrange = range(cycle_hire_coords[, 2]))
View(cycle_hire_coords)
View(cycle_hire_window)
cycle_hire_ppp <- as.ppp(cycle_hire_coords, W = cycle_hire_window)
View(cycle_hire_ppp)
View(cycle_hire_window)
ellipse_cycle_hire <- spatstat.geom::stdev.ellipse(cycle_hire_ppp$x, cycle_hire_ppp$y)
ellipse_cycle_hire <- dataEllipse(cycle_hire_coords[,1], cycle_hire_coords[,2],
levels = 0.95, draw = FALSE)
library(car)
ellipse_cycle_hire <- dataEllipse(cycle_hire_coords[,1], cycle_hire_coords[,2],
levels = 0.95, draw = FALSE)
write.table(ellipse_cycle_hire, file = "ellipse_cycle_hire.txt", row.names = FALSE)
plot(cycle_hire_coords, main = "Cycle Hire Points and Standard Deviational Ellipse")
lines(ellipse_cycle_hire, col = "red", lwd = 2)
cycle_hire_sf <- st_as_sf(cycle_hire)
leaflet(cycle_hire_sf) %>%
addProviderTiles("OpenStreetMap") %>%
addCircleMarkers(lng = ~x, lat = ~y, color = "blue", radius = 3) %>%
addPolygons(data = ellipse_cycle_hire, color = "red", weight = 2)
ellipse_polygon <- st_polygon(list(as.matrix(ellipse_cycle_hire)))
ellipse_sf <- st_sfc(ellipse_polygon, crs = st_crs(cycle_hire))
leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
addCircleMarkers(data = cycle_hire, lng = ~st_coordinates(cycle_hire)[,1], lat = ~st_coordinates(cycle_hire)[,2], color = "blue") %>%
addPolygons(data = ellipse_sf, color = "red", weight = 2)
cycle_hire_sf <- st_as_sf(data.frame(cycle_hire_coords), coords = c("X", "Y"), crs = 4326)
ellipse_polygon <- st_polygon(list(as.matrix(ellipse_cycle_hire)))
ellipse_sf <- st_sfc(ellipse_polygon, crs = st_crs(cycle_hire))
leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
addCircleMarkers(data = cycle_hire_sf, lng = ~X, lat = ~Y, color = "blue", radius = 3) %>%
addPolygons(data = ellipse_sf, color = "red", weight = 2)
cycle_hire_sf <- cbind(cycle_hire, cycle_hire_coords)
ellipse_polygon <- st_polygon(list(as.matrix(ellipse_cycle_hire)))
ellipse_sf <- st_sfc(ellipse_polygon, crs = st_crs(cycle_hire))
leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
addCircleMarkers(data = cycle_hire_sf, lng = ~X, lat = ~Y, color = "blue", radius = 3) %>%
addPolygons(data = ellipse_sf, color = "red", weight = 2)
data("quakes")
force(quakes)
quakes_sf <- st_as_sf(quakes, coords = c("long", "lat"), crs = 4326)
View(quakes_sf)
head(quakes_sf)
tmap_mode("view")
tm_shape(quakes_sf) +
tm_dots(col = "mag", palette = "-Spectral", title = "Magnitude") +
tm_basemap("OpenStreetMap")
tm_shape(quakes_sf) +
tm_dots(col = "depth", palette = "Blues", title = "Depth") +
tm_basemap("OpenStreetMap")
mean_center <- st_coordinates(st_centroid(st_union(quakes_sf)))
View(mean_center)
ellipse_quakes <- spatstat.geom::stdev.ellipse(quakes$long, quakes$lat, weights = quakes$mag)
compute_sde <- function(coords, weights = NULL) {
# Mean center
mean_center <- colMeans(coords)
# If weights are provided, calculate weighted mean center
if (!is.null(weights)) {
mean_center <- colSums(coords * weights) / sum(weights)
}
# Center the coordinates
centered_coords <- sweep(coords, 2, mean_center, "-")
# Compute covariance matrix (weighted if weights are provided)
if (!is.null(weights)) {
cov_matrix <- cov.wt(centered_coords, wt = weights)$cov
} else {
cov_matrix <- cov(centered_coords)
}
# Eigenvalue decomposition of covariance matrix
eig <- eigen(cov_matrix)
# Get lengths of ellipse axes (sqrt of eigenvalues)
axis_lengths <- sqrt(eig$values)
# Get rotation angle of ellipse (from eigenvectors)
angle <- atan2(eig$vectors[2, 1], eig$vectors[1, 1])
list(mean_center = mean_center, axis_lengths = axis_lengths, angle = angle)
}
# Compute standard deviational ellipse for quakes using magnitude as weights
coords <- st_coordinates(quakes_sf)
weights <- quakes$mag
View(coords)
ellipse_quakes <- compute_sde(coords, weights)
View(ellipse_quakes)
print(ellipse_quakes)
generate_ellipse_points <- function(mean_centre, axis_lengths, angle, n_points = 100) {
theta <- seq(0, 2 * pi, length.out = n_points)
# Parametric equation for an ellipse
ellipse_coords <- cbind(
axis_lengths[1] * cos(theta),
axis_lengths[2] * sin(theta)
)
# Rotate the ellipse by the specified angle
rotation_matrix <- matrix(c(cos(angle), -sin(angle), sin(angle), cos(angle)), ncol = 2)
rotated_coords <- ellipse_coords %*% rotation_matrix
# Translate the ellipse to the mean center
ellipse_coords <- sweep(rotated_coords, 2, mean_centre, "+")
return(ellipse_coords)
}
# Generate points for the ellipse
ellipse_points <- generate_ellipse_points(ellipse_quakes$mean_center, ellipse_quakes$axis_lengths, ellipse_quakes$angle)
View(ellipse_points)
ellipse_polygon <- st_polygon(list(ellipse_points))
generate_ellipse_points <- function(mean_centre, axis_lengths, angle, n_points = 100) {
theta <- seq(0, 2 * pi, length.out = n_points)
# Parametric equation for an ellipse
ellipse_coords <- cbind(
axis_lengths[1] * cos(theta),
axis_lengths[2] * sin(theta)
)
# Rotate the ellipse by the specified angle
rotation_matrix <- matrix(c(cos(angle), -sin(angle), sin(angle), cos(angle)), ncol = 2)
rotated_coords <- ellipse_coords %*% rotation_matrix
# Translate the ellipse to the mean center
ellipse_coords <- sweep(rotated_coords, 2, mean_centre, "+")
return(ellipse_coords)
}
# Generate points for the ellipse
ellipse_points <- generate_ellipse_points(ellipse_quakes$mean_centre, ellipse_quakes$axis_lengths, ellipse_quakes$angle)
generate_ellipse_points <- function(mean_centre, axis_lengths, angle, n_points = 100) {
theta <- seq(0, 2 * pi, length.out = n_points)
# Parametric equation for an ellipse
ellipse_coords <- cbind(
axis_lengths[1] * cos(theta),
axis_lengths[2] * sin(theta)
)
# Rotate the ellipse by the specified angle
rotation_matrix <- matrix(c(cos(angle), -sin(angle), sin(angle), cos(angle)), ncol = 2)
rotated_coords <- ellipse_coords %*% rotation_matrix
# Translate the ellipse to the mean center
ellipse_coords <- sweep(rotated_coords, 2, mean_centre, "+")
return(ellipse_coords)
}
# Generate points for the ellipse
ellipse_points <- generate_ellipse_points(ellipse_quakes$mean_center, ellipse_quakes$axis_lengths, ellipse_quakes$angle)
# Load the required libraries
library(sp)
library(spData)
library(sf)
library(tmap)
library(leaflet)
library(spatstat)
library(car)
# Question 1
# a) Load the "cycle_hire" dataset
data("cycle_hire", package = "spData")
# b) Compute a standard deviational ellipse
# Convert the 'cycle_hire' sf object to a ppp object
cycle_hire_coords <- st_coordinates(cycle_hire)
# Compute the standard deviational ellipse
ellipse_cycle_hire <- dataEllipse(cycle_hire_coords[,1], cycle_hire_coords[,2],
levels = 0.95, draw = FALSE)
# Save the ellipse points to a .txt file
write.table(ellipse_cycle_hire, file = "ellipse_cycle_hire.txt", row.names = FALSE)
# To visualize it on a plot (not interactive map)
plot(cycle_hire_coords, main = "Cycle Hire Points and Standard Deviational Ellipse")
lines(ellipse_cycle_hire, col = "red", lwd = 2)
# Convert ellipse points to sf polygon
ellipse_polygon <- st_polygon(list(as.matrix(ellipse_cycle_hire)))
# Convert the polygon to an sf object
ellipse_sf <- st_sfc(ellipse_polygon, crs = st_crs(cycle_hire))
# Plot the points and the ellipse on a leaflet map
leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
addCircleMarkers(data = cycle_hire, lng = ~st_coordinates(cycle_hire)[,1], lat = ~st_coordinates(cycle_hire)[,2], color = "blue") %>%
addPolygons(data = ellipse_sf, color = "red", weight = 2)
# c) Plot hire points and the ellipse on an interactive map using leaflet
# Create a new sf object by combining the coordinates with the original data
cycle_hire_sf <- cbind(cycle_hire, cycle_hire_coords)
# Convert ellipse points (from car::dataEllipse) to sf polygon
ellipse_polygon <- st_polygon(list(as.matrix(ellipse_cycle_hire)))
# Convert the polygon to an sf object
ellipse_sf <- st_sfc(ellipse_polygon, crs = st_crs(cycle_hire))
# Plot the points and the ellipse on a leaflet map
leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
addCircleMarkers(data = cycle_hire_sf, lng = ~X, lat = ~Y, color = "blue", radius = 3) %>%
addPolygons(data = ellipse_sf, color = "red", weight = 2)
# Question 2
# a) Load the "quakes" dataset and assign spatial coordinates
data("quakes")
quakes_sf <- st_as_sf(quakes, coords = c("long", "lat"), crs = 4326)
# Generate the head of the dataset
head(quakes_sf)
# b) Prepare two interactive maps of magnitude and depth using tmap
tmap_mode("view")
tm_shape(quakes_sf) +
tm_dots(col = "mag", palette = "-Spectral", title = "Magnitude") +
tm_basemap("OpenStreetMap")
tm_shape(quakes_sf) +
tm_dots(col = "depth", palette = "Blues", title = "Depth") +
tm_basemap("OpenStreetMap")
# c) Compute the mean centre and standard deviational ellipse with magnitude as weights
# Function to compute standard deviational ellipse
compute_sde <- function(coords, weights = NULL) {
# Mean centre
mean_centre <- colMeans(coords)
# If weights are provided, calculate weighted mean centre
if (!is.null(weights)) {
mean_centre <- colSums(coords * weights) / sum(weights)
}
# Centre the coordinates
centred_coords <- sweep(coords, 2, mean_centre, "-")
# Compute covariance matrix (weighted if weights are provided)
if (!is.null(weights)) {
cov_matrix <- cov.wt(centred_coords, wt = weights)$cov
} else {
cov_matrix <- cov(centred_coords)
}
# Eigenvalue decomposition of covariance matrix
eig <- eigen(cov_matrix)
# Get lengths of ellipse axes (sqrt of eigenvalues)
axis_lengths <- sqrt(eig$values)
# Get rotation angle of ellipse (from eigenvectors)
angle <- atan2(eig$vectors[2, 1], eig$vectors[1, 1])
list(mean_center = mean_centre, axis_lengths = axis_lengths, angle = angle)
}
# Compute standard deviational ellipse for quakes using magnitude as weights
coords <- st_coordinates(quakes_sf)
weights <- quakes$mag
ellipse_quakes <- compute_sde(coords, weights)
# Print the mean centre, axis lengths, and angle of the ellipse
print(ellipse_quakes)
# Optionally, create a visualisation of the ellipse
# Define a function to generate ellipse points for visualisation
generate_ellipse_points <- function(mean_centre, axis_lengths, angle, n_points = 100) {
theta <- seq(0, 2 * pi, length.out = n_points)
# Parametric equation for an ellipse
ellipse_coords <- cbind(
axis_lengths[1] * cos(theta),
axis_lengths[2] * sin(theta)
)
# Rotate the ellipse by the specified angle
rotation_matrix <- matrix(c(cos(angle), -sin(angle), sin(angle), cos(angle)), ncol = 2)
rotated_coords <- ellipse_coords %*% rotation_matrix
# Translate the ellipse to the mean centre
ellipse_coords <- sweep(rotated_coords, 2, mean_centre, "+")
# Ensure the ellipse is closed by adding the first point as the last point
ellipse_coords <- rbind(ellipse_coords, ellipse_coords[1, ])
return(ellipse_coords)
}
# Generate the ellipse points
ellipse_points <- generate_ellipse_points(ellipse_quakes$mean_center, ellipse_quakes$axis_lengths, ellipse_quakes$angle)
# Convert the ellipse points to an sf polygon
ellipse_polygon <- st_polygon(list(ellipse_points))
# Convert the polygon to an sf object
ellipse_sf <- st_sfc(ellipse_polygon, crs = st_crs(quakes_sf))
# d) Plot the output on a static map
tm_shape(quakes_sf) +
tm_dots(col = "mag", title = "Earthquake Magnitude") +
tm_shape(ellipse_sf) +
tm_borders(col = "red", lwd = 2) +
tm_layout(title = "Standard Deviational Ellipse for Quakes")
# Question 3
# 1. Load the "sg_house.csv" dataset and the Singapore shapefile, and combine them
sg_house <- read.csv("sg_house.csv")
# Load the required libraries
library(sp)
library(spData)
library(sf)
library(tmap)
library(leaflet)
library(spatstat)
library(car)
# Question 1
# a) Load the "cycle_hire" dataset
data("cycle_hire", package = "spData")
cycle_hire
# b) Compute a standard deviational ellipse
# Convert the 'cycle_hire' sf object to a ppp object
cycle_hire_coords <- st_coordinates(cycle_hire)
# Compute the standard deviational ellipse
ellipse_cycle_hire <- dataEllipse(cycle_hire_coords[,1], cycle_hire_coords[,2],
levels = 0.95, draw = FALSE)
# Save the ellipse points to a .txt file
write.table(ellipse_cycle_hire, file = "ellipse_cycle_hire.txt", row.names = FALSE)
# To visualize it on a plot (not interactive map)
plot(cycle_hire_coords, main = "Cycle Hire Points and Standard Deviational Ellipse")
lines(ellipse_cycle_hire, col = "red", lwd = 2)
# Convert ellipse points to sf polygon
ellipse_polygon <- st_polygon(list(as.matrix(ellipse_cycle_hire)))
# Convert the polygon to an sf object
ellipse_sf <- st_sfc(ellipse_polygon, crs = st_crs(cycle_hire))
# Plot the points and the ellipse on a leaflet map
leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
addCircleMarkers(data = cycle_hire, lng = ~st_coordinates(cycle_hire)[,1], lat = ~st_coordinates(cycle_hire)[,2], color = "blue") %>%
addPolygons(data = ellipse_sf, color = "red", weight = 2)
# c) Plot hire points and the ellipse on an interactive map using leaflet
# Create a new sf object by combining the coordinates with the original data
cycle_hire_sf <- cbind(cycle_hire, cycle_hire_coords)
# Convert ellipse points (from car::dataEllipse) to sf polygon
ellipse_polygon <- st_polygon(list(as.matrix(ellipse_cycle_hire)))
# Convert the polygon to an sf object
ellipse_sf <- st_sfc(ellipse_polygon, crs = st_crs(cycle_hire))
# Plot the points and the ellipse on a leaflet map
leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
addCircleMarkers(data = cycle_hire_sf, lng = ~X, lat = ~Y, color = "blue", radius = 3) %>%
addPolygons(data = ellipse_sf, color = "red", weight = 2)
# Question 2
# a) Load the "quakes" dataset and assign spatial coordinates
data("quakes")
quakes_sf <- st_as_sf(quakes, coords = c("long", "lat"), crs = 4326)
# Generate the head of the dataset
head(quakes_sf)
# b) Prepare two interactive maps of magnitude and depth using tmap
tmap_mode("view")
tm_shape(quakes_sf) +
tm_dots(col = "mag", palette = "-Spectral", title = "Magnitude") +
tm_basemap("OpenStreetMap")
tm_shape(quakes_sf) +
tm_dots(col = "depth", palette = "Blues", title = "Depth") +
tm_basemap("OpenStreetMap")
# c) Compute the mean centre and standard deviational ellipse with magnitude as weights
# Function to compute standard deviational ellipse
compute_sde <- function(coords, weights = NULL) {
# Mean centre
mean_centre <- colMeans(coords)
# If weights are provided, calculate weighted mean centre
if (!is.null(weights)) {
mean_centre <- colSums(coords * weights) / sum(weights)
}
# Centre the coordinates
centred_coords <- sweep(coords, 2, mean_centre, "-")
# Compute covariance matrix (weighted if weights are provided)
if (!is.null(weights)) {
cov_matrix <- cov.wt(centred_coords, wt = weights)$cov
} else {
cov_matrix <- cov(centred_coords)
}
# Eigenvalue decomposition of covariance matrix
eig <- eigen(cov_matrix)
# Get lengths of ellipse axes (sqrt of eigenvalues)
axis_lengths <- sqrt(eig$values)
# Get rotation angle of ellipse (from eigenvectors)
angle <- atan2(eig$vectors[2, 1], eig$vectors[1, 1])
list(mean_center = mean_centre, axis_lengths = axis_lengths, angle = angle)
}
# Compute standard deviational ellipse for quakes using magnitude as weights
coords <- st_coordinates(quakes_sf)
weights <- quakes$mag
ellipse_quakes <- compute_sde(coords, weights)
# Print the mean centre, axis lengths, and angle of the ellipse
print(ellipse_quakes)
# Optionally, create a visualisation of the ellipse
# Define a function to generate ellipse points for visualisation
generate_ellipse_points <- function(mean_centre, axis_lengths, angle, n_points = 100) {
theta <- seq(0, 2 * pi, length.out = n_points)
# Parametric equation for an ellipse
ellipse_coords <- cbind(
axis_lengths[1] * cos(theta),
axis_lengths[2] * sin(theta)
)
# Rotate the ellipse by the specified angle
rotation_matrix <- matrix(c(cos(angle), -sin(angle), sin(angle), cos(angle)), ncol = 2)
rotated_coords <- ellipse_coords %*% rotation_matrix
# Translate the ellipse to the mean centre
ellipse_coords <- sweep(rotated_coords, 2, mean_centre, "+")
# Ensure the ellipse is closed by adding the first point as the last point
ellipse_coords <- rbind(ellipse_coords, ellipse_coords[1, ])
return(ellipse_coords)
}
# Generate the ellipse points
ellipse_points <- generate_ellipse_points(ellipse_quakes$mean_center, ellipse_quakes$axis_lengths, ellipse_quakes$angle)
# Convert the ellipse points to an sf polygon
ellipse_polygon <- st_polygon(list(ellipse_points))
# Convert the polygon to an sf object
ellipse_sf <- st_sfc(ellipse_polygon, crs = st_crs(quakes_sf))
ellipse_sf
# d) Plot the output on a static map
tm_shape(quakes_sf) +
tm_dots(col = "mag", title = "Earthquake Magnitude") +
tm_shape(ellipse_sf) +
tm_borders(col = "red", lwd = 2) +
tm_layout(title = "Standard Deviational Ellipse for Quakes")
# Question 3
# 1. Load the "sg_house.csv" dataset and the Singapore shapefile, and combine them
sg_house <- read.csv("sg_house.csv")
# Load libraries
library(sf)            # For handling GeoJSON and spatial data
library(spatstat)      # For spatial point pattern analysis
library(tmap)          # For map visualisation
library(ggmap)         # Geocoding service using Google Maps
library(ggplot2)       # For general plotting
library(dplyr)         # For data wrangling
library(spdep)         # For spatial dependencies and neighbourhood analysis
# 1. Data Preparation
# Load the resale flat prices dataset
resale_data <- read.csv("ResaleflatpricesbasedonregistrationdatefromJan2017onwards.csv")
gc()
# Load libraries
library(sf)            # For handling GeoJSON and spatial data
library(spatstat)      # For spatial point pattern analysis
library(tmap)          # For map visualisation
library(ggplot2)       # For general plotting
library(tidyr)         # For tidying data
library(dplyr)         # For data wrangling
library(spdep)         # For spatial dependencies and neighbourhood analysis
library(tidygeocoder)  # For geocoding
# 1. Data Preparation
# Load the resale flat prices dataset
resale_data <- read.csv("ResaleflatpricesbasedonregistrationdatefromJan2017onwards.csv")
install.packages("devtools")
devtools::install_github("IRkernel/IRkernel")
IRkernel::installspec()
install.packages(c( "tidyverse", "gt", "rmarkdown", "gtsummary", "palmerpenguins"))
library(spdep, quietly = T); library(spatialreg, quietly = T)
data(used.cars, package="spData")
ls()
head(used.cars)
class(used.cars)
class(usa48.nb)
cars_ols = lm(formula = price.1960 ~ tax.charges, data = used.cars)
summary(cars_ols)
lmtest::bptest(cars_ols)
tseries::jarque.bera.test(cars_ols$residuals)
# normtest::jb.norm.test(cars_ols$residuals)
normtest::jb.norm.test(cars_ols$residuals)
install.packages("normtest")
cars_wlist = nb2listw(usa48.nb, style="W")
lm.morantest(cars_ols, cars_wlist)
moran.test(used.cars$price.1960, cars_wlist)
?lm.morantest
cars_sar = spautolm(formula = price.1960 ~ 1, data=used.cars, listw=cars_wlist)
summary(cars_sar)
cars_slm = lagsarlm(formula = price.1960 ~ tax.charges, data=used.cars, listw=cars_wlist)
summary(cars_slm)
cars_sem = errorsarlm(formula = price.1960 ~ tax.charges, data=used.cars, listw=cars_wlist)
summary(cars_sem)
?stsls
?lagsarlm
cars_sarar = sacsarlm(formula = price.1960 ~ tax.charges, data=used.cars, listw=cars_wlist)
summary(cars_sarar)
AIC(cars_ols); AIC(cars_sar); AIC(cars_sem); AIC(cars_slm); AIC(cars_sarar)
?lagsarlm
lm.LMtests(cars_ols, listw=cars_wlist, test="all")
?RStests
??RStests
??RStests
LR1.Sarlm(cars_slm) # reject H0
LR1.Sarlm(cars_sarar) # reject H0
LR.Sarlm(cars_sem,cars_sarar) # SEM vs SARAR --> reject H0
LR.Sarlm(cars_slm,cars_sarar) # SLM vs SARAR --> do not reject H0
LR.Sarlm(cars_sar,cars_slm) # SAR vs SLM --> do not reject H0
?optimize
?errorsarlm
?GMerrorsar
?sacsarlm
?gstsls
?lm.LMtests
?LR.Sarlm
library(gstat)
library(dismo); library(sf); library(tmap)
install.packages("raster")
install.packages("raster")
library(gstat)
library(dismo); library(sf); library(tmap)
library(raster)
setwd("~/Downloads/EC627 Spatial Econometrics & Data Analysis/Project")
setwd("~/Downloads/EC627 Spatial Econometrics & Data Analysis/Project")
